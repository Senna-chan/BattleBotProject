using System;
using System.IO.Ports;
using System.Linq;
using System.Threading;

namespace ArduinoPCCommunicationClient
{
    /**
     * Together with the Firmata 2 firmware (an Arduino sketch uploaded to the
     * Arduino board), this class allows you to control the Arduino board from
     * Processing: reading from and writing to the digital pins and reading the
     * analog inputs.
     */

    public class Arduino
    {
        public static int INPUT = 0;
        public static int OUTPUT = 1;
        public static int INPUT_PULLUP = 2;
        public static int LOW = 0;
        public static int HIGH = 1;

        private const int MAX_DATA_BYTES = 32;

        private SerialPort _serialPort;
        private int delay;

        private int waitForData = 0;
        private int executeMultiByteCommand = 0;
        private int multiByteChannel = 0;
        private int[] storedInputData = new int[MAX_DATA_BYTES];
        private bool parsingSysex;
        private int sysexBytesRead;

        public volatile int[] digitalInputData = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        public volatile int[] analogInputData = { 0, 0, 0, 0, 0, 0 };
        private Thread readThread = null;
        private object locker = new object();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="serialPortName">String specifying the name of the serial port. eg COM4</param>
        /// <param name="baudRate">The baud rate of the communication. Default 115200</param>
        /// <param name="autoStart">Determines whether the serial port should be opened automatically.
        ///                     use the Open() method to open the connection manually.</param>
        /// <param name="delay">Time delay that may be required to allow some arduino models
        ///                     to reboot after opening a serial connection. The delay will only activate
        ///                     when autoStart is true.</param>
        public Arduino(string serialPortName, Int32 baudRate, bool autoStart, int delay)
        {
            _serialPort = new SerialPort(serialPortName, baudRate);
            _serialPort.DataBits = 8;
            _serialPort.Parity = Parity.None;
            _serialPort.StopBits = StopBits.One;

            if (autoStart)
            {
                this.delay = delay;
                this.Open();
            }
        }

        /// <summary>
        /// Creates an instance of the Arduino object, based on a user-specified serial port.
        /// Assumes default values for baud rate (115200) and reboot delay (8 seconds)
        /// and automatically opens the specified serial connection.
        /// </summary>
        /// <param name="serialPortName">String specifying the name of the serial port. eg COM4</param>
        public Arduino(string serialPortName) : this(serialPortName, 250000, true, 8000) { }

        /// <summary>
        /// Creates an instance of the Arduino object, based on user-specified serial port and baud rate.
        /// Assumes default value for reboot delay (8 seconds).
        /// and automatically opens the specified serial connection.
        /// </summary>
        /// <param name="serialPortName">String specifying the name of the serial port. eg COM4</param>
        /// <param name="baudRate">Baud rate.</param>
        public Arduino(string serialPortName, Int32 baudRate) : this(serialPortName, baudRate, true, 8000) { }

        /// <summary>
        /// Creates an instance of the Arduino object using default arguments.
        /// Assumes the arduino is connected as the HIGHEST serial port on the machine,
        /// default baud rate (115200), and a reboot delay (8 seconds).
        /// and automatically opens the specified serial connection.
        /// </summary>
        public Arduino() : this(Arduino.list().ElementAt(list().Length - 1), 250000, true, 8000) { }

        /// <summary>
        /// Opens the serial port connection, should it be required. By default the port is
        /// opened when the object is first created.
        /// </summary>
        public void Open()
        {
            //_serialPort.NewLine = "\r\n";
            _serialPort.Open();

            Thread.Sleep(delay);
            if (readThread == null)
            {
                readThread = new Thread(processInput);
                readThread.Start();
            }
        }

        /// <summary>
        /// Closes the serial port.
        /// </summary>
        public void Close()
        {
            readThread.Join(500);
            readThread = null;
            _serialPort.Close();
        }

        /// <summary>
        /// Returns the last known state of the digital pin.
        /// </summary>
        /// <param name="pin">The arduino digital input pin.</param>
        /// <returns>Arduino.HIGH or Arduino.LOW</returns>
        public int digitalRead(int pin)
        {
            return (digitalInputData[pin]);
        }

        /// <summary>
        /// Returns the last known state of the analog pin.
        /// </summary>
        /// <param name="pin">The arduino analog input pin.</param>
        /// <returns>A value representing the analog value between 0 (0V) and 1023 (5V).</returns>
        public int analogRead(int pin)
        {
            return analogInputData[pin];
        }

        /// <summary>
        /// Sets the mode of the specified pin (INPUT or OUTPUT).
        /// </summary>
        /// <param name="pin">The arduino pin.</param>
        /// <param name="mode">Mode Arduino.INPUT or Arduino.OUTPUT.</param>
        public void setPinMode(int pin, int mode)
        {
            _serialPort.WriteLine($"SP:{pin}|{mode}");
        }

        public void SendLcdData(string line1, string line2 = "")
        {
            _serialPort.WriteLine(line2 != "" ? $"LCD:{line1}|{line2}" : $"LCD:{line1}");
        }

        /// <summary>
        /// Write to a digital pin that has been toggled to output mode with pinMode() method.
        /// </summary>
        /// <param name="pin">The digital pin to write to.</param>
        /// <param name="value">Value either Arduino.LOW or Arduino.HIGH.</param>
        public void digitalWrite(int pin, int value)
        {
            _serialPort.Write($"DW:{pin}|{value}");
            _serialPort.WriteLine($"DR:{pin}");
            Thread.Sleep(50);
            if (_serialPort.BytesToRead > 0)
            {
                var data = _serialPort.ReadLine();
                int.TryParse(data, out digitalInputData[pin]);
            }
        }

        /// <summary>
        /// Write to an analog pin using Pulse-width modulation (PWM).
        /// </summary>
        /// <param name="pin">Analog output pin.</param>
        /// <param name="value">PWM frequency from 0 (always off) to 255 (always on).</param>
        public void analogWrite(int pin, int value)
        {
            _serialPort.WriteLine($"AW:{pin}|{value}");
        }

        /// <summary>
        /// Lists all available serial ports on current system.
        /// </summary>
        /// <returns>An array of strings containing all available serial ports.</returns>
        public static string[] list()
        {
            return SerialPort.GetPortNames();
        }

        public void processInput()
        {
            bool recieveData = false;
            int count = 1;
            while (!recieveData)
            {
                _serialPort.Write("AreYouThere?");
                Thread.Sleep(30);
                if (_serialPort.BytesToRead > 0)
                {
                    Console.WriteLine("Reading Serial port");
                    var serialData = _serialPort.ReadLine();
                    if (serialData.Contains("IAmHere!")) recieveData = true;
                }
                Thread.Sleep(20);
            }
            while (recieveData)
            {
                for (int i = 0; i < 6; )
                {

                    _serialPort.WriteLine($"AR:{i}");
                    Thread.Sleep(30);
                    if (_serialPort.BytesToRead > 0)
                    {
                        try
                        {
                            var data = _serialPort.ReadLine();
                            int.TryParse(data, out analogInputData[i]);
                        }
                        catch (Exception)
                        {
                            Console.WriteLine($"Could not read Analog port {i} its data");
                        }

                    }
                    i++;
                }
                for (int i = 0; i < 14; )
                {
                    _serialPort.WriteLine($"DR:{i}");
                    Thread.Sleep(30);
                    if (_serialPort.BytesToRead > 0)
                    {
                        try
                        {
                            var data = _serialPort.ReadLine();
                            int.TryParse(data, out digitalInputData[i]);
                        }
                        catch (Exception)
                        {
                            Console.WriteLine($"Could not read Digital port {i} its data");
                        }
                    }
                    i++;
                }
                Thread.Sleep(20);
                Console.WriteLine(count);
                count++;
                int D0 = analogInputData[0];
                int A0 = digitalInputData[0];
                analogInputData[0] = A0;
                digitalInputData[0] = D0;
                foreach (int input in digitalInputData)
                {
                    Console.Write(input + ", ");
                }
                Console.WriteLine();
                foreach (int input in analogInputData)
                {
                    Console.Write(input + ", ");
                }
                
                Console.WriteLine();
            }
        }

    } // End Arduino class

} // End namespace